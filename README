							CSE-506 F'15 HW2 README file
							  DEEPAK GOYAL, 110347387

In this assignment, I have implemented AMFS(Anti Malware File System), a stackable file system which detect malware and prevents read/write to a malicious file using wrapfs f/s as baseline code.

***Implemented Extra credit B,
1. Supports tri-state file status
2. Detects bad pattern split across 2 buffer boundaries.
To check extra credit enable the following in amfs.h file at line no. 15

	#define EXTRA_CREDIT

							AMFS Design Approach and Policies

A) Design approach:

Files added:
1. amfsctl.c
2. fs/amfs/pattern.c

Added fs/amfs/pattern.c :
Pattern db related functionalities is implemented as an API in pattern.c file to enhance code modularity and code cleanliness.
File read /write/open and all other operations use the exposed API by pattern.c for anti malware support. Function prototypes are added to amfs.h related to this API. Using this approach the  f/s related code is still precise and readable.
Pattern db API:
1. Add pattern
2. Remove pattern
3. Get/set file status - safe, malicious or unknown
4. List patterns
5. scan buffer against patterns in db
6. scan complete file against patterns in db
6. Create pattern list

AMFSCTL ioctls
Added support for 3 ioctls for adding, removing and listing pattern in pattern db.
Implelented amfsctl.c  present in hw2-degoyal directory which allows these 3 operations.

Pattern database:
1. Added a pattern db object to super block private data.
2. Pattern db object stores pattern db path, db version and linked list head.
3. Implemented a doubly linked list structure to store patterns in m/m.
4. When a pattern is added/removed using amfsctl, linked list is updated along with the pattern db file.
5. Patterns are added to tail of linked list.
6. DB version is updated when pattern is added/remvoed.

Mount and Unmount Operation:
*Mount takes absolute path of db file* 

1. The pattern db object is a member of super block private data and is instantiated during f/s mount operation.
2. During mount the pattern db file path is saved in pattern db object, file is opened and patterns are read from db file delimited by '\n' and inflated into liked list.
3. On unmount patterns linked list is deleted and m/m is freed , then db object is deallocated before super block private data deallcation.

File status:
1. Unknown File
2. Safe File
3. Malicious file
The file status is stored in lower file xattrs along with pattern db version when the file was marked bad.

Xattrs used:
AMFS_XATTR_STATUS "user.amfs.status"
AMFS_XATTR_VERSION "user.amfs.version"


B) AMFS Policies:

1. File Open: 
 ***For extra credit: If file is opened in truncate mode, then allow open

a) File status == Safe and db version match :- File safe, allow open
b) File status == Safe and db version mismatch :- File status unknown, allow file open.
***For Extra credit: 
c) File status == Safe and db version mismatch :- File status unknown, scan whole file
		->if bad pattern found in buffer boundaries, then mark file malicious and return -ENOENT
		->if no bad pattern found in file, then mark file Safe and allow open	

d) File status == Malicious and db version match :- File malicious, return -ENOENT
c) File status == Malicious and db version mismatch:- FIle status unknown, allow open
***For Extra credit: 
c) File status == Malicious and db version mismatch :- File status unknown, scan whole file
		->if bad pattern found in buffer boundaries, then mark file malicious and return -ENOENT
		->if no bad pattern found in file, then mark file Safe and allow open

2. Read:

a) If bad pattern found in read buffer, then mark file bad using xattrs and ***clear user buffer*** and return -EIO to user.
b) Else if buffer is safe, then no error.

3. Write:

a) If bad pattern is found in user buffer, then return -EIO, buffer not written to file as it is better to stop malware entry in file by early detection and prevention instead of allowing malware to be written to file. File still remains safe as malware is not written to file.
b) IF no malware is detected, then allow write operation.

4. Link:
If file is malicious, then hard link and soft link is not created and -ENOENT is returned. It allows to curb propagation of malware in different directories.

5. Rename:
If file is marked malicious and db version match, then rename is not allowed amd -ENOENT is returned. It increases security and curbs malware propagation.

6. Remove XATTR :
Removal of "user.amfs.status", "user.amfs.version" xattrs is blocked, -EPERM is returned.

AMFSCTL ioctls:
Added support for 3 ioctls for adding, removing and listing pattern in pattern db.
Implelented amfsctl.c  present in hw2-degoyal directory which allows these 3 operations.

1. To list known patterns
$ ./amfsctl -l /mnt/amfs

2. To add a new pattern
$ ./amfsctl -a "newpatt" /mnt/amfs

3. To remove an old pattern
$ ./amfsctl -r "oldpatt" /mnt/amfs

For listing patterns, currently the user buffer size is 16 pages i.e 65536 bytes in amfsctl.c.
***Patterns that can be completely written in this buffer are listed, no partial pattern allowd in end.
***Increase buffer size in the amfsctl.c BUFFER_SIZE to get a bigger list.
